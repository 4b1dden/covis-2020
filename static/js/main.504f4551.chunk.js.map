{"version":3,"sources":["logo.svg","model/SEIR.js","model/data.js","components/CovidSpreadModel.js","model/normalisation.js","components/SimpleHorizontalSlider.js","components/Notes.js","components/footer.js","strapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getLast","array","length","curveColors","S","E","I","R","H","curveDescriptions","style","color","className","FATAL","curveFills","curveFormatters","T","s","curveStackId","CovidSpreadModel","props","useState","realWorldData","N","incubationTime","infectionTime","contactRate","probabilityOfTransmission","isQuarantined","quarantinePower","curveList","quarantineStart","initialCases","t","i","push","normalised","simulation","rate","data","keys","Object","obj","map","key","normaliseToArray","initialValues","params","tList","S0","E0","I0","R0","H0","MILD0","MODERATE0","FATAL0","alpha","beta","gamma","hospitalizationRate","fatalityRate","hospitalizationTime","dt","deltaBeta","forEach","currentT","Math","pow","nextS","nextE","nextI","nextR","nextH","nextFATAL","seirModel","r0","toFixed","window","innerWidth","isCompact","setIsCompact","useEffect","addEventListener","class","height","width","margin","top","right","left","bottom","strokeDasharray","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","x","stroke","isFront","position","strokeWidth","value","name","tickCount","label","interval","dataKey","tickFormatter","val","toString","replace","formatter","round","datapoint","r","y","confirmed","curveId","type","stackId","fill","SimpleHorizontalSlider","defaultVal","title","min","description","max","setValue","step","valueFormatter","showValue","children","onChange","trackStyle","backgroundColor","handleStyle","border","diffEq1","diffEq2","Notes","Container","Row","target","href","Footer","curveSelection","defaultSliderProps","logslider","minv","log","scale","exp","Strapper","curves","setCurves","populationSize","setPopulationSize","setInitialCases","populationSizeSlider","setPopulationSizeSlider","setIncubationTime","setInfectionTime","setContactRate","setQuarantinePower","setQuarantineStart","setProbabilityOfTransmission","quarantine","setQuarantine","layoutGraph","hasNotes","Col","xs","sm","md","lg","xl","layoutSliders","checked","event","substr","marginTop","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.504f4551.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology#The_SEIR_model\n\nconst getLast = (array) => array[array.length - 1];\n\ntype InitialValues = {\n  S0: Number,\n  E0: Number,\n  I0: Number,\n  R0: Number,\n  H0: Number,\n}\n\ntype Params = {\n  alpha: Number,\n  beta: Number,\n  gamma: Number,\n  isQuarantined: Boolean,\n  quarantinePower: Number,\n  hospitalizationRate: Number,\n  quarantineStart: Number\n}\n\nexport const seirModel = (initialValues: InitialValues, params: Params, tList) => {\n  const { S0, E0, I0, R0, H0, MILD0 = 0, MODERATE0 = 0, FATAL0 = 0} = initialValues;\n  let [S, E, I, R, H, MILD, MODERATE, FATAL] = [[S0], [E0], [I0], [R0], [H0], [0], [0], [0]];\n  let { alpha, beta, gamma, isQuarantined, quarantinePower = 1, hospitalizationRate = 0.15, fatalityRate = 0.037, hospitalizationTime = 14, quarantineStart } = params;\n  const dt = tList[1] - tList[0];\n  let deltaBeta = false;\n\n  tList.forEach((currentT, i) => {\n    if (currentT >= quarantineStart) {\n      beta = isQuarantined && !deltaBeta ? beta * (1 - Math.pow(quarantinePower, 2)) : beta;\n      deltaBeta = true;\n    }\n\n    let nextS = getLast(S) - (beta * getLast(S) * getLast(I))*dt;\n    let nextE = getLast(E) + (beta * getLast(S) * getLast(I) - alpha *getLast(E))*dt;\n    let nextI = getLast(I) + (alpha * getLast(E) - gamma * getLast(I))*dt;\n    let nextR = getLast(R) + (gamma * getLast(I))*dt;\n    let nextH = getLast(H) + (hospitalizationRate * getLast(I) - 1/hospitalizationTime * getLast(H))*dt;\n    let nextFATAL = getLast(FATAL) + getLast(H) * (fatalityRate * dt) * dt;\n\n    S.push(nextS);\n    E.push(nextE);\n    I.push(nextI);\n    R.push(nextR);\n    H.push(nextH);\n    FATAL.push(nextFATAL);\n  });\n\n  return {\n    S, E, I, R, H, FATAL\n  }\n}","import React, { useState } from 'react';\n\nexport const curveColors = {\n  S: \"#239e81\",\n  E: \"#ffc663\", \n  I: \"rgb(240, 2, 127)\",\n  R: \"#63c3ff\",\n  H: \"#8ab5ff\"\n}\n\nexport const curveDescriptions = {\n  S: <span>Susceptible - <span style={{color: curveColors[\"S\"]}} className=\"highlight text-S\">náchylná</span>, ohrozená skupina obyvateľstva</span>,\n  E: <span>Exposed - <span style={{color: curveColors[\"E\"]}} className=\"highlight text-E\">vystavení</span> - vírus majú v tele, ale sú v inkubačnej dobe a neprejavujú symptómy</span>,\n  I: <span>Infected - <span style={{color: curveColors[\"I\"]}} className=\"highlight text-I\">chorí</span>, infekční jedinci</span>,\n  R: <span>Removed - skupina obyvateľstva, ktorá je z modelu <span style={{color: curveColors[\"R\"]}} className=\"highlight text-R\">vylúčená </span>, či už v izolácii, vyliečení alebo mŕtvi</span>,\n  H: <span>Hospitalizovaní - infekční jedinci, ktorí boli <span style={{color: curveColors[\"H\"]}} className=\"highlight text-H\">hospitalizovaní</span></span>,\n  FATAL: <span>FATAL </span>\n}\n\n\nexport const curveFills = {\n  R: \"url(#R_gradient)\",\n  H: \"url(#H_gradient)\",\n  S: \"url(#S_gradient)\"\n}\n\nexport const curveFormatters = {\n  T: (s) => `deň ${s}`,\n  S: (s) => `${s} náchylných`,\n  E: (s) => `${s} vystavených`,\n  I: (s) => `${s} chorých`,\n  R: (s) => `${s} vylúčených`,\n  H: (s) => `${s} hospitalizovaných`,\n  FATAL: (s) => `${s} mŕtvych`,\n}\n\nexport const curveStackId = {\n  S: 1,\n  E: 3,\n  I: 4,\n  R: 5,\n  H: 2,\n}","import React, { useMemo, useState, useEffect } from 'react';\nimport { seirModel } from '../model/SEIR';\nimport { normaliseToArray } from '../model/normalisation'\nimport {\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, Area, AreaChart, Label, ReferenceLine, Customized, ReferenceDot, ResponsiveContainer\n} from 'recharts';\nimport { curveColors, curveFormatters, curveStackId, curveFills } from '../model/data';\nimport { CustomizedReferenceLineLabel } from './CustomizedReferenceLineLabel';\nimport { getRealData, parseRealData } from '../model/realData';\nimport Latex from 'react-latex-next';\n\ntype CovidSpreadModelProps = {\n  N: Number,\n  incubationTime: Number,\n  infectionTime: Number,\n  contactRate: Number,\n  probabilityOfTransmission: Number,\n  isQuarantined: Boolean,\n  quarantinePower: Number,\n  quarantineStart: Number,\n  curveList: Object,\n  initialCases: Number\n}\n\nconst t_max = 200;\nconst dt = .1;\n\nconst numberWithCommas = x => x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\nexport const CovidSpreadModel = (props: CovidSpreadModelProps) => {\n  const [realWorldData, setRealWorldData] = useState([]);\n  const { \n      N,\n      incubationTime, \n      infectionTime, \n      contactRate, \n      probabilityOfTransmission, \n      isQuarantined = false, \n      quarantinePower, \n      curveList, \n      quarantineStart, \n      initialCases = 1\n    } = props;\n  let t = [];\n  for (let i = 0; i < t_max; i += dt) t.push(i);\n\n  const initialValues = {\n    S0: 1 - initialCases/N,\n    E0: initialCases/N,\n    I0: 0,\n    R0: 0,\n    H0: 0\n  }\n\n  const alpha = 1/incubationTime;\n  const beta = contactRate * probabilityOfTransmission;\n  const gamma = 1/infectionTime;\n\n  const simulation = seirModel(initialValues, {alpha, beta, gamma, isQuarantined, quarantinePower, quarantineStart}, t);\n  const normalised = normaliseToArray(simulation, 1/dt, N);\n  const r0 = (\n      contactRate * probabilityOfTransmission * infectionTime * \n      (isQuarantined ? \n        (1 - Math.pow(quarantinePower, 2))\n        : 1\n        )\n      )\n      .toFixed(2);\n\n  const [isCompact, setIsCompact] = useState(window.innerWidth < 800);\n  useEffect(() => {\n    const handleResize = () => setIsCompact(window.innerWidth < 800);\n\n    window.addEventListener('resize', handleResize)\n  })\n\n  // useMemo(() => getRealData().then(data => {\n  //   setRealWorldData(\n  //     parseRealData(data)\n  //   );\n  // }), [])\n\n  // const w = window.innerWidth > \n\n  \n\n  return (\n    <div class=\"chart-wrapper\">\n      <div class=\"left default-text\">\n        Pre čo najlepší zážitok odporúčame použiť počítač či tablet, nie mobil. \n      </div>\n      <div class=\"r0 default-text\">\n        <Latex>$R_0$</Latex> = {r0} (základné reprodukčné číslo, ktoré určuje rýchlosť šírenia vírusu)\n      </div>\n      <ResponsiveContainer height={300} width={\"100%\"}> \n      <AreaChart\n          height={300}\n          data={normalised}\n          margin={{\n            top: 25, right: 20, left: 40, bottom: 10,\n          }}\n        >\n        <CartesianGrid strokeDasharray=\"3\" />\n        <defs>\n          <linearGradient id=\"R_gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={curveColors[\"R\"]} stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor={curveColors[\"R\"]} stopOpacity={0}/>\n          </linearGradient>\n          <linearGradient id=\"H_gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={curveColors[\"H\"]} stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor={curveColors[\"H\"]} stopOpacity={0}/>\n          </linearGradient>\n          <linearGradient id=\"S_gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={curveColors[\"S\"]} stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor={curveColors[\"S\"]} stopOpacity={0}/>\n          </linearGradient>\n        </defs>\n\n        {isQuarantined ? \n          <ReferenceLine x={quarantineStart} stroke={\"#1a2538\"} isFront={false} position={\"top\"} strokeWidth={.4}>\n            <Label value={\"Zavedenie karantény\"} position={\"top\"} /> \n          </ReferenceLine>\n          : \"\"\n        }\n\n        <XAxis name=\"LIL uZI\" tickCount={10} label={<span>Den</span>} interval={isCompact ? 49 : 19} dataKey=\"T\">\n          <Label value=\"dní od začiatku\" offset={-5} position={\"bottom\"}/>\n        </XAxis>\n        <YAxis tickFormatter={val => numberWithCommas(val)}/>\n        {/* <YAxis scale=\"log\" /> */}\n        <Tooltip formatter={(value, id) =>`${curveFormatters[id](Math.round(value))}`}/>\n\n        {realWorldData ? \n          realWorldData.map((datapoint, i) => <ReferenceDot key={i} r={1} x={datapoint.T} y={datapoint.confirmed} />)\n          : \"\"\n        }\n\n        {Object.keys(curveList).map((curveId, id) => curveList[curveId] ? \n          <Area key={id} type=\"monotone\" dataKey={curveId} stackId={curveStackId[curveId]} fill={curveFills[curveId] || curveColors[curveId]} stroke={curveColors[curveId]} />\n          : \"\"\n        )}\n      </AreaChart>\n      </ResponsiveContainer>\n       \n    </div>\n   \n  )\n} ","export const normaliseToArray = (simulation: Object, rate: Number, N: number) => {\n  let data = [];\n  const keys = Object.keys(simulation);\n\n  // assuming same length of data\n  for(let i = 0; i < simulation[keys[0]].length; i++) {\n    if (i % rate === 0) {\n      let obj = {\n        T: i / rate\n      }\n      \n      keys.map(key => obj[key] = [])\n      keys.map(key => obj[key].push(\n        simulation[key][i] * N\n      ))\n      data.push(obj)\n    }\n  }\n\n  return data\n}","import React, { Component, useState } from 'react'\nimport Slider, { Range } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\ntype Props = {\n  value: Number,\n  defaultVal: Number,\n  min: Number,\n  max: Number,\n  setValue: Function,\n  title: String,\n  description: String,\n  step: Number,\n  showValue: Number,\n}\n\nexport const SimpleHorizontalSlider = (props) => {\n  const { defaultVal, title, description, min, max, value, setValue, step, valueFormatter, showValue } = props;\n\n  return (\n    <div className='slider custom-labels'>\n      <div className=\"slider-text\">\n        <div className=\"slider-title\">{title}</div>\n        <div className=\"default-text\">{props.children}</div>\n        <div className='slider-value'>{valueFormatter ? showValue ? valueFormatter ? valueFormatter(showValue) : showValue : valueFormatter(value) : value}</div>\n        {/* <div className='slider-value left'>reset</div> */}\n      </div>\n      <Slider\n        className=\"var-slider\"\n        min={min}\n        max={max}\n        value={value}\n        onChange={setValue}\n        trackStyle={{\n          backgroundColor: \"rgb(144, 144, 144)\",\n        }}\n        step={step}\n        handleStyle={{\n          border: \"solid 1px #93a1ad\"\n        }}\n        // onAfterChange={setValue}\n        // onChangeComplete={setValue}\n      />\n    </div>\n  )\n  }","import React, { useMemo, useState, useEffect } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\n\nimport 'katex/dist/katex.min.css';\nimport Latex from 'react-latex-next';\n\nconst abg = '$\\\\alpha, \\\\beta, \\\\gamma$';\nconst diffEq1 = `\n  $$\n  \\\\frac{dS}{dt}=-\\\\beta SI \\\\qquad\n  \\\\frac{dE}{dt}={\\\\beta}SI-\\\\alpha{E} \\\\qquad\n  \n  `\nconst diffEq2 = `\n  \\\\frac{dI}{dt}=\\\\alpha{E}-\\\\gamma{I} \\\\qquad\n  \\\\frac{dR}{dt}=\\\\gamma{I}\n  $$\n  $$R_0=\\\\frac{\\\\beta}{\\\\gamma}$$\n`\n\nexport const Notes = () => {\n  const [isCompact, setIsCompact] = useState(window.innerWidth < 800);\n  useEffect(() => {\n    const handleResize = () => setIsCompact(window.innerWidth < 800);\n\n    window.addEventListener('resize', handleResize)\n  })\n\n  return (\n    <Container>\n      <div className=\"notes-wrapper\">\n        <Row>\n          <div className=\"notes-title\">\n            Poznámky\n          </div>\n        </Row>\n        <Row>\n          <div class=\"default-text note-block\">\n            Vytvorili sme túto kalkulačku s cieľom lepšie ilustrovať terajšiu situáciu a dôležitosť opatrení, ktoré sú momentálne takmer na celom svete. \n            Účelom nášho modelu nie je čo najpresnejšie predpovedať budúcnosť, ale snaha priblížiť matematické modelovanie širšej verejnosti a poskytnúť jednoduchú vizualizáciu predpovedí.\n            <b> Predvolené hodnoty parametrov sme založili na viacerých štúdiách, na ktoré vás v prípade väčšieho záujmu môžeme odkázať, no tak, aby čo najlepšie predstavovali momentálnu situáciu.</b> Taktiež však môžete ich hodnoty meniť podľa vašej predstavy a sledovať, ako naše správanie ovplyvňuje vývoj ochorenia. \n            <b> Zavedením karantény</b> (naľavo hore) môžete vidieť známy “flattening the curve” - oddiaľovanie náporu a získavanie času, o ktorý momentálne všektým krajinám ide. \n            <i> Model sme si prispôsobili pre lepšie objasnenie situácie, a tým sme trochu znížili presnosť. </i>\n          </div>\n          <div class=\"default-text note-block\">\n            Na modelovanie šírenia COVID-19 sme použili jednoduchý model používaný na infekčné choroby - <a target=\"_tab\" href=\"https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology#The_SEIR_model\"> \n            model SEIR</a>. (<Latex>$S$</Latex>-Susceptible, <Latex>$E$</Latex>-Exposed, <Latex>$I$</Latex>-Infected, <Latex>$R$</Latex>-Removed). Je to jednoduchý, idealizovaný model, ktorý rozdeľuje spoločnosť do skupín (priehradok) a počas priebehu choroby sa pacienti presúvajú jednotlivými skupinami. Jedným z predpokladov je, že už vyliečený človek ochorieť znova nemôže.\n            Každá skupina je popísaná diferenciálnymi rovnicami. \n            Pohyb ľudí, predstavujúci progres ich choroby, je charakterizovaný prechodovými konštantami <Latex>{abg}</Latex>.\n            <Latex> $\\alpha$</Latex> závisí od inkubačnej doby, <Latex>$\\beta$</Latex> od pomeru ľudského kontaktu a šance prenosu a <Latex>$\\gamma$</Latex> od infekčného času. \n            Viac podrobností nájdete <a target=\"_tab\" href=\"https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology#The_SEIR_model\">tu</a> alebo v <a href=\"https://arxiv.org/pdf/1705.01079.pdf\">jednom</a> z veľa vedeckých článkov na túto tému, prípadne v <a target=\"_tab\" href=\"https://github.com/4b1dden/covis-2020\">zdrojovóm kóde</a>. \n\n          <div class=\"note-block\">\n            {isCompact ? <Latex>{`${diffEq1}$$$$${diffEq2}`}</Latex> : <Latex>{diffEq1 + diffEq2}</Latex>}\n          </div>\n\n          <div class=\"note-block\">\n           Základné reprodukčné číslo <Latex>$R_0$</Latex> pre predvolené hodnoty v našom modeli prepočítavame z pomeru ľudského kontaktu a šance prenosu choroby pre lepšiu ilustráciu významu sociálneho dištancovania tak, aby sedelo s momentálnymi odhadmi expertov. Nie je to bežná prax pri ochoreniach šíriacich sa kvapôčkovo, no pre naše účely nám to príde zaujímavé. \n          </div>\n\n          <div class=\"note-block\">\n            <i>\n              -pri zmene parametrov je dôležité dávať pozor aj na zmeny na ypsilonovej osi, ktorá sa automaticky prispôsobuje počtu jedincov <br />\n              -počet hospitalizovaných je ilustračný, z dôvodu zlej predvídateľnosti tejto veličiny (použili sme 15% - údaj z Číny) a priemernej dĺžky hospitalizácie (ktorá momentálne činí 14 dní) <br />\n              -z podobného dôvodu nejasnosti neuvádzame ani počet obetí \n            </i>\n            </div>\n          </div>\n        </Row>\n      </div>\n    </Container>\n  )\n}\n","import React from 'react'\nimport { Container, Row, Col } from 'reactstrap';\n\n\nexport const Footer = () => {\n  return (\n    <Container>\n      <hr />\n      <div className=\"footer default-text\">\n          Prípadné otázky alebo feedback radi privítame na nasledujúcich platformách:\n          <div className=\"footer-contact\">\n            kristiancabala@gmail.com alebo <a href=\"https://www.facebook.com/kiko.cabala\">Facebook</a> <br />\n            richard.hamerlik@gmail.com alebo <a href=\"https://www.facebook.com/richard.hamerlik.7\">Facebook</a> <br />\n            <a href=\"https://github.com/4b1dden/covis-2020\">Source code</a>\n          </div>\n      </div> \n    </Container>\n  )\n}","import React, { useState, Fragment, useEffect } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { CovidSpreadModel } from './components/CovidSpreadModel';\nimport { SimpleHorizontalSlider } from './components/SimpleHorizontalSlider';\nimport { curveDescriptions, curveColors } from './model/data';\nimport { Notes } from './components/Notes'\nimport { Footer } from './components/footer.js'\nimport Checkbox from 'rc-checkbox';\nimport 'rc-checkbox/assets/index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Latex from 'react-latex-next';\n\nconst defaultPopulationSize = 69; // nice\nconst defaultIncubationTime = 5.1;\nconst defaultInfectionTime = 2.38;\nconst defaultContactRate = 20;\nconst defaultProbabilityOfTransmission = 1/18;\nconst defaultQuarantinePower = .5;\nconst curveSelection = [\"S\", \"E\", \"I\", \"R\", \"H\"];\nconst defaultQuarantineStart = 20;\nconst defaultInitialCases = 1;\n\nconst defaultSliderProps = {\n  min: 0,\n  step: 0.1\n}\n\nconst numberWithCommas = x => x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\nconst logslider = position => {\n  var minp = 0;\n  var maxp = 100;\n  var minv = Math.log(10000);\n  var maxv = Math.log(10*10e6);\n\n  var scale = (maxv-minv) / (maxp-minp);\n\n  return Math.exp(minv + scale*(position-minp));\n}\n\nexport const Strapper = () => {\n  const [curves, setCurves] = useState({S: true, E: true, I: true, R: true})\n  const onCurveSelect = (target) => setCurves({...curves, [target.name]: target.checked})\n\n  const [populationSize, setPopulationSize] = useState(logslider(defaultPopulationSize));\n  const [initialCases, setInitialCases] = useState(defaultInitialCases);\n  const [populationSizeSlider, setPopulationSizeSlider] = useState(defaultPopulationSize)\n  const [incubationTime, setIncubationTime] = useState(defaultIncubationTime);\n  const [infectionTime, setInfectionTime] = useState(defaultInfectionTime);\n  const [contactRate, setContactRate] = useState(defaultContactRate);\n  const [quarantinePower, setQuarantinePower] = useState(defaultQuarantinePower);\n  const [quarantineStart, setQuarantineStart] = useState(defaultQuarantineStart);\n  const [probabilityOfTransmission, setProbabilityOfTransmission] = useState(defaultProbabilityOfTransmission);\n  const [quarantine, setQuarantine] = useState(false);\n\n  // todo: create useIsCompact\n  const [isCompact, setIsCompact] = useState(window.innerWidth < 800);\n  useEffect(() => {\n    const handleResize = () => setIsCompact(window.innerWidth < 800);\n\n    window.addEventListener('resize', handleResize)\n  })\n\n  const layoutGraph = hasNotes => (\n    <Col xs={12} sm={12} md={8} lg={8} xl={8}>\n      <CovidSpreadModel \n        N={populationSize}\n        incubationTime={incubationTime}\n        infectionTime={infectionTime}\n        contactRate={contactRate}\n        quarantinePower={quarantinePower}\n        isQuarantined={quarantine}\n        quarantineStart={quarantineStart}\n        probabilityOfTransmission={probabilityOfTransmission}\n        curveList={curves}\n        initialCases={initialCases}\n      />\n      {hasNotes ? <Notes /> : \"\"}\n    </Col>\n  )\n\n  const layoutSliders = (\n      <Col xs={12} sm={12} md={4} lg={4} xl={4}>\n      <div className=\"curve-selection-wrapper\">\n        {curveSelection.map(curveId => <div>\n          <Checkbox className={`checkbox-${curveId}`} name={curveId} checked={curves[curveId]} onChange={event => onCurveSelect(event.target)} /> \n          <span className=\"default-text\"> {curveDescriptions[curveId]}</span>\n        </div>)}\n      </div>\n      <Row>\n      <div className=\"quarantine-wrapper\">\n        <div className=\"quarantine-toggle\">\n          <Checkbox checked={quarantine} onChange={event => setQuarantine(event.target.checked)} /> <span className=\"bold default-text\">Karanténa</span>\n        </div>\n      </div>\n      </Row>\n      {quarantine ? \n        <Fragment>\n            <SimpleHorizontalSlider title={\"Začiatok karantény\"} value={quarantineStart} setValue={setQuarantineStart} min={0} max={200} step={1}>\n              Deň, v ktorom bola zavedená karanténa.\n            </SimpleHorizontalSlider>\n            <SimpleHorizontalSlider title={\"Sila karantény\"} value={quarantinePower} setValue={setQuarantinePower} min={0} max={1} step={0.01}>\n              Je to jednotka, ktorú zavádzame pre ilustráciu efektu, ktorý má sociálne dištancovanie na šírenie choroby. Napríklad hodnota 0.8 teda predstavuje 80% zníženie blízkych kontaktov a infekčnej doby jedincov.\n            </SimpleHorizontalSlider>\n        </Fragment>\n        : \"\"\n      }\n      <SimpleHorizontalSlider title={\"Veľkosť populácie\"} valueFormatter={val => `${numberWithCommas(Math.round(val))} ľudí`} showValue={populationSize} value={populationSizeSlider} setValue={(val) => {\n        setPopulationSizeSlider(val);\n        setPopulationSize(logslider(populationSizeSlider))\n      }} min={0} max={100}>\n        Veľkosť sociálnej skupiny, v rámci ktorej modelujeme šírenie choroby.\n      </SimpleHorizontalSlider>\n      <SimpleHorizontalSlider {...defaultSliderProps} title={\"Infekčný čas\"} value={infectionTime} valueFormatter={val => `${val} dní`} setValue={setInfectionTime} max={8} step={0.01}>\n        Doba, počas ktorej jedinec potenciálne šíri ochorenie. Priemerný čas od vypuknutia choroby po izoláciu jedinca (štádium I -> R).\n      </SimpleHorizontalSlider>\n      <SimpleHorizontalSlider valueFormatter={val => `${val} dní`} title={\"Inkubačná doba\"} value={incubationTime} setValue={setIncubationTime} min={0} max={10} step={0.1}>\n        Obdobie od vstupu nákazy do organizmu po vypuknutie choroby. Jediný parameter, ktorý je čisto biologický a nevieme ho ovplyvniť. Vychádzame z \n        <a target=\"_tab\" href=\"https://annals.org/aim/fullarticle/2762808/incubation-period-coronavirus-disease-2019-covid-19-from-publicly-reported\"> poslednej dostupnej štúdie.</a> \n      </SimpleHorizontalSlider>\n      <SimpleHorizontalSlider {...defaultSliderProps} valueFormatter={val => `${val} blízkych kontaktov`} title={\"Pomer ľudského kontaktu\"} value={contactRate} min={5} setValue={setContactRate} max={25}>\n        Je to priemerný počet \n        <a target=\"_tab\" \n        href=\"https://www.fhi.no/en/op/novel-coronavirus-facts-advice/advice-to-health-personnel/definitions-of-probable-and-confirmed-cases-of-coronavirus-covid-19-and-con/\" \n        > blízkych kontaktov </a>, ktoré majú jedinci v populácii. Ťažko opísateľná veličina pri chorobách širacich sa kvapôčkami, ale zavádzame ju pre ilustráciu.\n      </SimpleHorizontalSlider>\n      <SimpleHorizontalSlider valueFormatter={val => `${((val.toFixed(4) * 100)).toString().substr(0, 5)}%`}  {...defaultSliderProps} title={\"Šanca prenosu choroby\"} value={probabilityOfTransmission} setValue={setProbabilityOfTransmission} max={1} step={0.0001}>\n        Šanca prenosu choroby pri blízkom kontakte medzi ohrozeným a infikovaným.\n      </SimpleHorizontalSlider>\n      <SimpleHorizontalSlider {...defaultSliderProps} title={\"Začiatočný počet nakazených\"} value={initialCases} setValue={setInitialCases} min={1} max={100} step={1}>\n        Počet nakazených v dni začiatku simulácie.\n      </SimpleHorizontalSlider>\n    </Col>\n    )\n\n  return (\n    <Container className=\"containerStrapper\"> \n      <Row>\n        <span className=\"calculator-title\">Pandemická kalkulačka</span>\n      </Row>\n      <Row>\n        {isCompact ? \n          <Fragment>\n            {layoutGraph(false)}\n            <div style={{marginTop: '6rem'}}>\n\n            {layoutSliders}\n            </div>\n            <Col><Notes /></Col>  </Fragment>\n          :\n          <Fragment>{layoutSliders} {layoutGraph(true)} </Fragment>\n        }\n      </Row>\n        <Footer />\n    </Container>\n  )\n}","import React from 'react';\nimport logo from './logo.svg';\nimport { Strapper } from './strapper';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Strapper className=\"strapper\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}