{"version":3,"sources":["logo.svg","model/SEIR.js","model/data.js","components/CovidSpreadModel.js","model/normalisation.js","components/SimpleHorizontalSlider.js","strapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getLast","array","length","curveColors","S","E","I","R","H","curveDescriptions","style","color","className","FATAL","curveFills","curveFormatters","T","s","curveStackId","CovidSpreadModel","props","N","incubationTime","infectionTime","contactRate","probabilityOfTransmission","isQuarantined","quarantinePower","curveList","quarantineStart","t","i","push","normalised","simulation","rate","data","keys","Object","obj","map","key","normaliseToArray","initialValues","params","tList","S0","E0","I0","R0","H0","MILD0","MODERATE0","FATAL0","alpha","beta","gamma","hospitalizationRate","fatalityRate","hospitalizationTime","dt","deltaBeta","forEach","currentT","nextS","nextE","nextI","nextR","nextH","nextFATAL","seirModel","class","width","height","margin","top","right","left","bottom","strokeDasharray","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","x","stroke","isFront","position","strokeWidth","value","name","label","interval","dataKey","tickFormatter","val","toString","replace","formatter","Math","round","curveId","type","stackId","fill","SimpleHorizontalSlider","defaultVal","title","min","description","max","setValue","step","valueFormatter","showValue","children","onChange","trackStyle","backgroundColor","handleStyle","border","curveSelection","defaultSliderProps","logslider","minv","log","scale","exp","Strapper","useState","curves","setCurves","populationSize","setPopulationSize","populationSizeSlider","setPopulationSizeSlider","setIncubationTime","setInfectionTime","setContactRate","setQuarantinePower","setQuarantineStart","setProbabilityOfTransmission","quarantine","setQuarantine","Container","Row","Col","xs","sm","md","lg","xl","checked","event","target","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f75a5b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology#The_SEIR_model\n\nconst getLast = (array) => array[array.length - 1];\n\ntype InitialValues = {\n  S0: Number,\n  E0: Number,\n  I0: Number,\n  R0: Number,\n  H0: Number,\n}\n\ntype Params = {\n  alpha: Number,\n  beta: Number,\n  gamma: Number,\n  isQuarantined: Boolean,\n  quarantinePower: Number,\n  hospitalizationRate: Number,\n  quarantineStart: Number\n}\n\nexport const seirModel = (initialValues: InitialValues, params: Params, tList) => {\n  const { S0, E0, I0, R0, H0, MILD0 = 0, MODERATE0 = 0, FATAL0 = 0} = initialValues;\n  let [S, E, I, R, H, MILD, MODERATE, FATAL] = [[S0], [E0], [I0], [R0], [H0], [0], [0], [0]];\n  let { alpha, beta, gamma, isQuarantined, quarantinePower = 1, hospitalizationRate = 0.3, fatalityRate = 0.037, hospitalizationTime = 10, quarantineStart } = params;\n  const dt = tList[1] - tList[0];\n  let deltaBeta = false;\n\n  tList.forEach((currentT, i) => {\n    if (currentT >= quarantineStart) {\n      beta = isQuarantined && !deltaBeta ? beta * quarantinePower : beta;\n      deltaBeta = true;\n    }\n\n    let nextS = getLast(S) - (beta * getLast(S) * getLast(I))*dt;\n    let nextE = getLast(E) + (beta * getLast(S) * getLast(I) - alpha *getLast(E))*dt;\n    let nextI = getLast(I) + (alpha * getLast(E) - gamma * getLast(I))*dt;\n    let nextR = getLast(R) + (gamma * getLast(I))*dt;\n    let nextH = getLast(H) + (hospitalizationRate * getLast(I) - 1/hospitalizationTime * getLast(H))*dt;\n    let nextFATAL = getLast(FATAL) + getLast(H) * (fatalityRate * dt) * dt;\n\n    S.push(nextS);\n    E.push(nextE);\n    I.push(nextI);\n    R.push(nextR);\n    H.push(nextH);\n    FATAL.push(nextFATAL);\n  });\n\n  return {\n    S, E, I, R, H, FATAL\n  }\n}","import React, { useState } from 'react';\n\nexport const curveColors = {\n  S: \"#239e81\",\n  E: \"#ffc663\", \n  I: \"rgb(240, 2, 127)\",\n  R: \"#63c3ff\",\n  H: \"#8ab5ff\"\n}\n\nexport const curveDescriptions = {\n  S: <span>Susceptible - <span style={{color: curveColors[\"S\"]}} className=\"highlight text-S\">náchylná</span>, ohrozená skupina obyvateľstva</span>,\n  E: <span>Exposed - <span style={{color: curveColors[\"E\"]}} className=\"highlight text-E\">vystavení</span> - vírus majú v tele, ale sú v inkubačnej dobe</span>,\n  I: <span>Infected - <span style={{color: curveColors[\"I\"]}} className=\"highlight text-I\">chorí</span>, infekční jedinci</span>,\n  R: <span>Removed - skupina obyvateľstva, ktorá je z modelu <span style={{color: curveColors[\"R\"]}} className=\"highlight text-R\">vylúčená </span>, či už v izolácii, vyliečení alebo mŕtvi)</span>,\n  H: <span>Hospitalizovaní - infekční jedinci, ktorí boli <span style={{color: curveColors[\"H\"]}} className=\"highlight text-H\">hospitalizovaní</span></span>,\n  FATAL: <span>FATAL </span>\n}\n\n\nexport const curveFills = {\n  R: \"url(#R_gradient)\",\n  H: \"url(#H_gradient)\",\n  S: \"url(#S_gradient)\"\n}\n\nexport const curveFormatters = {\n  T: (s) => `deň ${s}`,\n  S: (s) => `${s} náchylných`,\n  E: (s) => `${s} vystavených`,\n  I: (s) => `${s} chorých`,\n  R: (s) => `${s} vylúčených`,\n  H: (s) => `${s} hospitalizovaných`,\n  FATAL: (s) => `${s} mŕtvych`,\n}\n\nexport const curveStackId = {\n  S: 1,\n  E: 3,\n  I: 4,\n  R: 5,\n  H: 2,\n}","import React from 'react';\nimport { seirModel } from '../model/SEIR';\nimport { normaliseToArray } from '../model/normalisation'\nimport {\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, Area, AreaChart, Label, ReferenceLine, Customized\n} from 'recharts';\nimport { curveColors, curveFormatters, curveStackId, curveFills } from '../model/data'\nimport { CustomizedReferenceLineLabel } from './CustomizedReferenceLineLabel'\n\ntype CovidSpreadModelProps = {\n  N: Number,\n  incubationTime: Number,\n  infectionTime: Number,\n  contactRate: Number,\n  probabilityOfTransmission: Number,\n  isQuarantined: Boolean,\n  quarantinePower: Number,\n  quarantineStart: Number,\n  curveList: Object\n}\n\nconst t_max = 200;\nconst dt = .1;\n\nconst numberWithCommas = x => x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\nexport const CovidSpreadModel = (props: CovidSpreadModelProps) => {\n  const { N, incubationTime, infectionTime, contactRate, probabilityOfTransmission, isQuarantined = false, quarantinePower, curveList, quarantineStart } = props;\n  let t = [];\n  for (let i = 0; i < t_max; i += dt) t.push(i);\n\n  const initialValues = {\n    S0: 1 - 1/N,\n    E0: 1/N,\n    I0: 0,\n    R0: 0,\n    H0: 0\n  }\n\n  const alpha = 1/incubationTime;\n  const beta = contactRate * probabilityOfTransmission;\n  const gamma = 1/infectionTime;\n\n  const simulation = seirModel(initialValues, {alpha, beta, gamma, isQuarantined, quarantinePower, quarantineStart}, t);\n  const normalised = normaliseToArray(simulation, 1/dt, N);\n\n  return (\n    <div class=\"chart-wrapper\">\n        <AreaChart\n          width={800}\n          height={300}\n          data={normalised}\n          margin={{\n            top: 25, right: 20, left: 40, bottom: 10,\n          }}\n        >\n        <CartesianGrid strokeDasharray=\"3\" />\n        <defs>\n          <linearGradient id=\"R_gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={curveColors[\"R\"]} stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor={curveColors[\"R\"]} stopOpacity={0}/>\n          </linearGradient>\n          <linearGradient id=\"H_gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={curveColors[\"H\"]} stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor={curveColors[\"H\"]} stopOpacity={0}/>\n          </linearGradient>\n          <linearGradient id=\"S_gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={curveColors[\"S\"]} stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor={curveColors[\"S\"]} stopOpacity={0}/>\n          </linearGradient>\n        </defs>\n\n        {isQuarantined ? \n          <ReferenceLine x={quarantineStart} stroke={\"#1a2538\"} isFront={false} position={\"top\"} strokeWidth={.4}>\n            <Label value={\"Zavedenie karantény\"} position={\"top\"} /> \n          </ReferenceLine>\n          : \"\"\n        }\n\n        <XAxis name=\"LIL uZI\" label={<span>Den</span>} interval={9} dataKey=\"T\">\n          <Label value=\"dní od začiatku\" offset={-5} position={\"bottom\"}/>\n        </XAxis>\n        <YAxis tickFormatter={val => numberWithCommas(val)}/>\n        {/* <YAxis scale=\"log\" /> */}\n        <Tooltip formatter={(value, id) =>`${curveFormatters[id](Math.round(value))}`}/>\n\n        {Object.keys(curveList).map((curveId, id) => curveList[curveId] ? \n          <Area key={id} type=\"monotone\" dataKey={curveId} stackId={curveStackId[curveId]} fill={curveFills[curveId] || curveColors[curveId]} stroke={curveColors[curveId]} />\n          : \"\"\n        )}\n      </AreaChart>\n    </div>\n   \n  )\n} ","export const normaliseToArray = (simulation: Object, rate: Number, N: number) => {\n  let data = [];\n  const keys = Object.keys(simulation);\n\n  // assuming same length of data\n  for(let i = 0; i < simulation[keys[0]].length; i++) {\n    if (i % rate === 0) {\n      let obj = {\n        T: i / rate\n      }\n      \n      keys.map(key => obj[key] = [])\n      keys.map(key => obj[key].push(\n        simulation[key][i] * N\n      ))\n      data.push(obj)\n    }\n  }\n\n  return data\n}","import React, { Component, useState } from 'react'\nimport Slider, { Range } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\ntype Props = {\n  value: Number,\n  defaultVal: Number,\n  min: Number,\n  max: Number,\n  setValue: Function,\n  title: String,\n  description: String,\n  step: Number,\n  showValue: Number,\n}\n\nexport const SimpleHorizontalSlider = (props) => {\n  const { defaultVal, title, description, min, max, value, setValue, step, valueFormatter, showValue } = props;\n\n  return (\n    <div className='slider custom-labels'>\n      <div className=\"slider-text\">\n        <div className=\"slider-title\">{title}</div>\n        <div className=\"default-text\">{props.children}</div>\n        <div className='slider-value'>{valueFormatter ? showValue ? valueFormatter ? valueFormatter(showValue) : showValue : valueFormatter(value) : value}</div>\n      </div>\n      <Slider\n        className=\"var-slider\"\n        min={min}\n        max={max}\n        value={value}\n        onChange={setValue}\n        trackStyle={{\n          backgroundColor: \"rgb(144, 144, 144)\",\n        }}\n        step={step}\n        handleStyle={{\n          border: \"solid 1px #93a1ad\"\n        }}\n        // onAfterChange={setValue}\n        // onChangeComplete={setValue}\n      />\n    </div>\n  )\n  }","import React, { useState, Fragment } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { CovidSpreadModel } from './components/CovidSpreadModel';\nimport { SimpleHorizontalSlider } from './components/SimpleHorizontalSlider';\nimport { curveDescriptions, curveColors } from './model/data';\nimport Checkbox from 'rc-checkbox';\nimport 'rc-checkbox/assets/index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst defaultPopulationSize = 50;\nconst defaultIncubationTime = 5.1;\nconst defaultInfectionTime = 2.38;\nconst defaultContactRate = 15;\nconst defaultProbabilityOfTransmission = 1/15;\nconst defaultQuarantinePower = .8;\nconst curveSelection = [\"S\", \"E\", \"I\", \"R\", \"H\"];\nconst defaultQuarantineStart = 20;\n\nconst defaultSliderProps = {\n  min: 0,\n  step: 0.1\n}\n\nconst numberWithCommas = x => x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\nconst logslider = position => {\n  var minp = 0;\n  var maxp = 100;\n  var minv = Math.log(10000);\n  var maxv = Math.log(10*10e6);\n\n  var scale = (maxv-minv) / (maxp-minp);\n\n  return Math.exp(minv + scale*(position-minp));\n}\n\nexport const Strapper = () => {\n  const [curves, setCurves] = useState({S: false, E: true, I: true, R: true})\n  const onCurveSelect = (target) => setCurves({...curves, [target.name]: target.checked})\n\n  const [populationSize, setPopulationSize] = useState(logslider(defaultPopulationSize));\n  const [populationSizeSlider, setPopulationSizeSlider] = useState(defaultPopulationSize)\n  const [incubationTime, setIncubationTime] = useState(defaultIncubationTime);\n  const [infectionTime, setInfectionTime] = useState(defaultInfectionTime);\n  const [contactRate, setContactRate] = useState(defaultContactRate);\n  const [quarantinePower, setQuarantinePower] = useState(defaultQuarantinePower);\n  const [quarantineStart, setQuarantineStart] = useState(defaultQuarantineStart);\n  const [probabilityOfTransmission, setProbabilityOfTransmission] = useState(defaultProbabilityOfTransmission);\n  const [quarantine, setQuarantine] = useState(false);\n\n  return (\n    <Container className=\"containerStrapper\"> \n      <Row>\n        <span className=\"calculator-title\">Pandemická kalkulačka</span>\n      </Row>\n      <Row>\n        <Col xs={4} sm={4} md={4} lg={4} xl={4}>\n          <div className=\"curve-selection-wrapper\">\n            {curveSelection.map(curveId => <div>\n              <Checkbox className={`checkbox-${curveId}`} name={curveId} checked={curves[curveId]} onChange={event => onCurveSelect(event.target)} /> \n              <span className=\"default-text\"> {curveDescriptions[curveId]}</span>\n            </div>)}\n          </div>\n          <Row>\n          <div className=\"quarantine-wrapper\">\n            <div className=\"quarantine-toggle\">\n              <Checkbox checked={quarantine} onChange={event => setQuarantine(event.target.checked)} /> <span className=\"default-text\">Karanténa?</span>\n            </div>\n          </div>\n          </Row>\n          {quarantine ? \n            <Fragment>\n                <SimpleHorizontalSlider title={\"Začiatok karantény\"} value={quarantineStart} setValue={setQuarantineStart} min={0} max={200} step={1}>\n                  Deň, v ktorom bola zavedená karanténa.\n                </SimpleHorizontalSlider>\n                <SimpleHorizontalSlider title={\"Sila karantény\"} value={quarantinePower} setValue={setQuarantinePower} min={0} max={1} step={0.01}>\n                  Je to jednotka, ktorú zavádzame pre ilustráciu efektu, ktorý má sociálne dištancovanie na šírenie choroby. Napríklad hodnota 0.8 teda predstavuje 80% zníženie blízkych kontaktov a infekčnej doby jedincov.\n                </SimpleHorizontalSlider>\n            </Fragment>\n            : \"\"\n          }\n          <SimpleHorizontalSlider title={\"Veľkosť populácie\"} valueFormatter={val => `${numberWithCommas(Math.round(val))} ľudí`} showValue={populationSize} value={populationSizeSlider} setValue={(val) => {\n            setPopulationSizeSlider(val);\n            setPopulationSize(logslider(populationSizeSlider))\n          }} min={0} max={100}>\n            Veľkosť sociálnej skupiny, v rámci ktorej modelujeme šírenie choroby. Väčšinou máme na mysli nejakú krajinu, no samotná veľkosť skupiny má však minimálny vplyv na vývin situácie v nej. \n          </SimpleHorizontalSlider>\n          <SimpleHorizontalSlider {...defaultSliderProps} title={\"Infekčný čas\"} value={incubationTime} valueFormatter={val => `${val} dní`} setValue={setIncubationTime} max={8} step={0.01}>\n            Charakterizuje prechod medzi chorými v inkubačnej dobe a chorými-infekčnými (štádium E -> I).\n          </SimpleHorizontalSlider>\n          <SimpleHorizontalSlider valueFormatter={val => `${val} dní`} title={\"Inkubačný čas\"} value={infectionTime} setValue={setInfectionTime} min={0} max={5} step={0.1}>\n            Obdobie od vstupu nákazy do organizmu po vypuknutie choroby. Jediný parameter, ktorý je čisto biologický a nevieme ho ovplyvniť. Vychádzame z poslednej \n            <a target=\"_tab\" href=\"https://www.thelancet.com/journals/langlo/article/PIIS2214-109X(20)30074-7/fulltext\"> dostupnej štúdie</a>.\n          </SimpleHorizontalSlider>\n          <SimpleHorizontalSlider {...defaultSliderProps} title={\"Pomer ľudského kontaktu\"} value={contactRate} setValue={setContactRate} max={20}>\n            Charakterizuje prechod medzi ohrozenou skupinou obyvateľstva a chorými v inkubačnej dobe - S -> E.\n          </SimpleHorizontalSlider>\n          <SimpleHorizontalSlider {...defaultSliderProps} title={\"Šanca prenosu choroby\"} value={probabilityOfTransmission} setValue={setProbabilityOfTransmission} max={1} step={0.01}>\n            proste Šanca prenosu choroby brashko nechapes co si jak\n          </SimpleHorizontalSlider>\n        </Col>\n        <Col xs={8} sm={8} md={8} lg={8} xl={8}>\n          <CovidSpreadModel \n            N={populationSize}\n            incubationTime={incubationTime}\n            infectionTime={infectionTime}\n            contactRate={contactRate}\n            quarantinePower={quarantinePower}\n            isQuarantined={quarantine}\n            quarantineStart={quarantineStart}\n            probabilityOfTransmission={probabilityOfTransmission}\n            curveList={curves}\n          />\n        </Col>\n      </Row>\n    </Container>\n  )\n}","import React from 'react';\nimport logo from './logo.svg';\nimport { Strapper } from './strapper';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Strapper className=\"strapper\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}